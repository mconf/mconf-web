-# locals:
-#   private_message (PrivateMessage)
-#   target_user (User): user that is reading the message
-#   expanded (boolean)

- receiver = User.with_disabled.find(private_message.receiver_id)

.logo-in-thread
  = render 'user_logo', :user => receiver

.thread-content
  - unless expanded
    %ul.thread-action-links.visible-on-hover{ :"data-hover-tracked" => "parent-#{private_message.id}" }
      - privatetitle = sanitize(private_message.title)
      %li= link_to t('open').downcase, message_path(private_message)
      %li= link_to t('remove').downcase, message_path(private_message, :private_message => {:deleted_by_sender => true}), :data => { :confirm => t('delete.confirm', :element => privatetitle) }, :method => :delete,:title => t('delete.one')

  .thread-title
    - unless private_message.checked
      = icon_unread_message({ :title => t("icons.unread_message_by_receiver") })

    = t('.wrote_to')

    - if expanded
      - sender = User.find_by_id_with_disabled(private_message.sender_id)
      - if sender.disabled?
        %span.thread-author= sender.name
      - else
        = link_to(sender.name, user_path(sender), :class => "thread-author")
    - else
      - if receiver.disabled?
        %span.thread-author= receiver.name
      - else
        = link_to(receiver.name, user_path(receiver), :class => "thread-author")

    = t('.titled')

    = render 'message_title', expanded: expanded, private_message: private_message

  .thread-text
    = render 'message_text', expanded: expanded, private_message: private_message